package ${project.serviceModuleConfig.packageName};

import java.io.Serializable;
import java.util.List;

/**
 *
 */
public interface Service<T> {

	/**
	 * Renvoi le nombre d'enregistrement maximum ramené par une recherche
	 * @return
	 */
	public abstract int getMaxResults();

	/**
	 * Enregistre en base la liste d'objets passés en paramètre.
	 *
	 * @param listeObject la liste d'objets à enregistrer
	 * @throws ServiceException
	 * @return L'objet enregistré
	 */
	public abstract List<Serializable> save(List<T> listeObject)
			throws ServiceException;

	/**
	 * Crée en base l'objet passé en paramètre
	 *
	 * @param object L'objet à créer
	 * @return l'objet créé (avec son id)
	 * @throws ServiceException
	 */
	public abstract Serializable save(T object) throws ServiceException;

	/**
	 * Met à jour en base l'objet passé en paramètre
	 *
	 * @param object L'objet à mettre à jour
	 * @throws ServiceException
	 * @return l'objet mis à jour
	 */
	public abstract void update(T object) throws ServiceException;

	/**
	 * Met à jour en base l'objet passé en paramètre
	 *
	 * @param object L'objet à mettre à jour
	 * @throws ServiceException
	 * @return l'objet mis à jour
	 */
	public abstract void update(List<T> objects) throws ServiceException;

	/**
	 * Supprime en base la liste d'objets passés en paramètre.
	 *
	 * @param listeObject la liste d'objets à supprimer
	 * @throws ServiceException
	 */
	@SuppressWarnings("unchecked")
	public abstract void deleteById(List<? extends Serializable> listeObject)
			throws ServiceException;

	/**
	 * Supprime l'objet correspondant à l'id passé en paramètre
	 *
	 * @param id L'id de l'objet à supprimer
	 * @throws ServiceException
	 */
	public abstract void deleteById(Serializable id) throws ServiceException;

	/**
	 * Supprime en base la liste d'objet passée en paramètre.
	 * Si le paramètre session est null, alors crée la session et la transaction.
	 *
	 * @param object les objets à supprimer
	 * @throws ServiceException
	 */
	public abstract void delete(List<T> objects) throws ServiceException;

	/**
	 * Supprime en base l'objet passé en paramètre.
	 * Si le paramètre session est null, alors crée la session et la transaction.
	 *
	 * @param object l'objet à supprimer
	 * @throws ServiceException
	 */
	public abstract void delete(T object) throws ServiceException;

	/**
	 * Récupère l'objet correspondant à l'id passé en paramètre
	 *
	 * @param id L'id de l'objet à récupérer
	 * @throws ServiceException
	 * @return L'objet récupéré
	 */
	public abstract T get(Serializable id) throws ServiceException;

	/**
	 * Récupère l'objet correspondant à l'id passé en paramètre. Les descendants
	 * de l'objet sont initialisés si isChildrenInitialized vaut true.
	 *
	 * @param id L'id de l'objet à récupérer
	 * @param initializeChildren indique si les descendants de l'objet doivent être initialiser.
	 * @throws ServiceException
	 * @return L'objet récupéré
	 */
	@SuppressWarnings("unchecked")
	public abstract T get(Serializable id, boolean initializeChildren)
			throws ServiceException;

	/**
	 * Récupère la liste complète des objets
	 *
	 * @throws ServiceException
	 * @return la liste des objets
	 */
	@SuppressWarnings("unchecked")
	public abstract List<T> list() throws ServiceException;

	/**
	 * Récupère la liste complète des objets
	 *
	 * @param application_id l'id de l'application pour laquelle il faut récupérer les objets
	 * @throws ServiceException
	 * @return la liste des objets
	 */
	@SuppressWarnings("unchecked")
	public abstract List<T> list(boolean isChildrenInitialized)
			throws ServiceException;

	/**
	 * Récupère la liste des objets correspondant aux critères de l'objet passé en paramètre
	 *
	 * @param object L'objet contenant les critères
	 * @throws ServiceException
	 * @return la liste des objets trouvé
	 */
	public abstract List<T> search(T object) throws ServiceException;

	/**
	 * Récupère la liste des objets correspondant aux critères de l'objet passé en paramètre
	 *
	 * @param object L'objet contenant les critères
	 * @param initializeSecondLevelObjects Force l'initialisation des objets liés en mode 'lazy' aux objets trouvés
	 * @throws ServiceException
	 * @return la liste des objets trouvé
	 */
	@SuppressWarnings("unchecked")
	public abstract List<T> search(T object,
			boolean initializeSecondLevelObjects) throws ServiceException;

}
