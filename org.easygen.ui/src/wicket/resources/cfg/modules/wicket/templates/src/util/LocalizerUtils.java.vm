package ${project.viewModuleConfig.packageName}.util;

import java.text.MessageFormat;
import java.util.Locale;

import org.apache.log4j.Logger;
import org.apache.wicket.Application;
import org.apache.wicket.Component;
import org.apache.wicket.Localizer;
import org.apache.wicket.Session;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.StringResourceModel;

public class LocalizerUtils {

	private static final Logger logger = Logger.getLogger(LocalizerUtils.class);

	public static String getString(Component component, String key, Object... parameters) {
		String message = getLocalizer(component).getString(key, component);
		if (parameters != null && parameters.length != 0) {
			for (int i = 0; i < parameters.length; i++) {
				if (! (parameters[i] instanceof String)) {
					parameters[i] = String.valueOf(parameters[i]);
				}
			}
			// Apply the parameters
			try {
				final MessageFormat format = new MessageFormat(message, getLocale(component));
				message = format.format(parameters);
			} catch (RuntimeException e) {
				logger.warn("Can't get i18n resource for key: "+key, e);
				return '%'+key+'%';
			}
		}
		return message;
	}

	private static Locale getLocale(Component component) {
		if (component != null) {
			component.getLocale();
		} else {
			Session.get().getLocale();
		}
		return null;
	}

	private static Localizer getLocalizer(Component component) {
		Localizer localizer = Application.get().getResourceSettings().getLocalizer();
		if (localizer == null) {
			if (component != null) {
				localizer = component.getLocalizer();
			} else {
				throw new IllegalStateException("No localizer has been set");
			}
		}
		return localizer;
	}

	public static IModel getModel(Component component, String key, Object... args) {
		StringResourceModel localizedModel = new StringResourceModel("list.resultCount", component, null, args);
		return localizedModel;
	}

}
