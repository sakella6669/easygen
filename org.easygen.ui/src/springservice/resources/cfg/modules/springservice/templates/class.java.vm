package ${project.serviceModuleConfig.packageName};

import java.io.Serializable;

import org.hibernate.Criteria;
import org.hibernate.Hibernate;
import org.hibernate.criterion.Expression;

import ${project.dataModuleConfig.packageName}.${object.className};

/**
 * Service pour l'objet ${object.className} qui permet d'effectuer les actions standards (save, update, get, list, search, delete)
 */
public class ${object.className}Service extends GenericService<${object.className}> {

	@Override
	protected Class<${object.className}> getObjectClass() {
		return ${object.className}.class;
	}

	@Override
	protected Serializable getObjectId(${object.className} object) {
#foreach ($field in $object.fields)
#if ($field.primaryKey == true)
#set ( $methodName = $stringutils.capitalizeFirstLetter($field.propertyName) )
		return object.get${methodName}();
#end
#end
	}

	@Override
	protected ${object.className} merge(${object.className} loadedObject, ${object.className} updatedObject) {
#foreach ($field in $object.fields)
	#if ($field.primaryKey == false && $field.foreignKey == false)
	#set ( $methodName = $stringutils.capitalizeFirstLetter($field.propertyName) )
		loadedObject.set${methodName}(updatedObject.get${methodName}());
	#end
#end
		return loadedObject;
	}

	@Override
	protected void initializeChildren(${object.className} object) {
#foreach ($field in $object.fields)
	#if ($field.foreignKey == true && $field.foreignList == true)
		#set ( $fieldName = $stringutils.capitalizeFirstLetter(${field.propertyName}) )
		Hibernate.initialize(object.get${fieldName}());
	#end
#end
	}

	@Override
	protected void addAssociationCriteria(Criteria criteria, ${object.className} object) {
#foreach ($field in $object.fields)
	#if ($field.foreignKey == true && $field.foreignList == false)
		#foreach ($fkField in $field.foreignObject.fields)
			#if ($fkField.primaryKey == true)
		#set ( $fieldName = $stringutils.capitalizeFirstLetter(${fkField.propertyName}) )
		if (object.get${field.foreignObject.className}() != null && object.get${field.foreignObject.className}().get${fieldName}() != null) {
			logger.debug("Adding filter on ${field.propertyName}.${fkField.propertyName} [" + object.get${field.foreignObject.className}().get${fieldName}() + ']');
			criteria.add(Expression.eq("${field.propertyName}.${fkField.propertyName}", object.get${field.foreignObject.className}().get${fieldName}()));
		}
			#end
		#end
	#end
#end
	}
}
