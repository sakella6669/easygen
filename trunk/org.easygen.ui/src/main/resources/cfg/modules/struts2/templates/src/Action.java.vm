#macro( generateObjectImport $aObject )
	#foreach ($aField in $aObject.fields)
		#if ($aField.foreignKey == true && $aField.foreignList == false && $aField.nullable == false)
			import ${project.dataModuleConfig.packageName}.${aField.propertyType};
			##generateObjectImport( $aField.foreignObject )
		#end
	#end
#end
#set ($objectVarName = "${object.className.toLowerCase().charAt(0)}${object.className.substring(1)}" )
package ${project.viewModuleConfig.packageName};

import java.util.LinkedList;
import java.util.List;

#generateObjectImport( $object )
import ${project.dataModuleConfig.packageName}.${object.className};

import ${project.serviceModuleConfig.packageName}.Service;
import ${project.serviceModuleConfig.packageName}.ServiceException;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ModelDriven;

/**
 * 
 */
public class ${object.className}Action extends GenericAction implements ModelDriven<${object.className}> {

	private static final long serialVersionUID = 1L;

	private Service<${object.className}> ${objectVarName}Service;

	private ${object.className} ${objectVarName};

	public ${object.className} get${object.className}() {
		return ${objectVarName};
	}

	/**
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public ${object.className} getModel() {
		${objectVarName} = new ${object.className}();
		return ${objectVarName};
	}

	/**
	 * @see com.opensymphony.xwork2.Preparable#prepare()
	 */
	@Override
	public void prepare() throws Exception {
		super.prepare();
		logger.debug("Preparing "+getClass().getName());
		${objectVarName}Service = serviceLocator.get${object.className}Service();
#foreach ($aField in $object.fields)
	#if ($aField.foreignKey == true && $aField.foreignList == false && $aField.nullable == false)
		add${aField.foreignObject.className}s();
	#end
#end
	}

#foreach ($aField in $object.fields)
	#if ($aField.foreignKey == true && $aField.foreignList == false && $aField.nullable == false)
	/**
	 * @throws ServiceException
	 */
	protected void add${aField.foreignObject.className}s() throws ServiceException {
		Service<${aField.foreignObject.className}> ${aField.propertyName}Service = serviceLocator.get${aField.foreignObject.className}Service();
		List<${aField.foreignObject.className}> ${aField.propertyName}s = ${aField.propertyName}Service.list();
		request.setAttribute("${aField.propertyName}s", ${aField.propertyName}s);
	}

	#end
#end
	public String prepareadd() throws Exception {
		return Action.SUCCESS;
	}

	public String list() throws Exception {
		try {
			List<${object.className}> ${objectVarName}s = ${objectVarName}Service.list();
			request.setAttribute("${objectVarName}s", ${objectVarName}s);
			logger.debug("Found " + ${objectVarName}s.size() + " ${objectVarName}s");
			return Action.SUCCESS;
		} catch (Exception e) {
			request.setAttribute("${objectVarName}s", new LinkedList<${object.className}>());
			return handleError("Can't get ${objectVarName}s", e);
		}
	}

	public String search() throws Exception {
		try {
			List<${object.className}> ${objectVarName}s = ${objectVarName}Service.search(${objectVarName});
			request.setAttribute("${objectVarName}s", ${objectVarName}s);
			logger.debug("Found " + ${objectVarName}s.size() + " ${objectVarName}s");
			return Action.SUCCESS;
		} catch (Exception e) {
			request.setAttribute("${objectVarName}s", new LinkedList<${object.className}>());
			return handleError("Can't get ${objectVarName}s", e);
		}
	}

	public String add() throws Exception {
		try {
			logger.info("Adding new ${objectVarName}");
			Long id = (Long) ${objectVarName}Service.save(${objectVarName});
			${objectVarName}.setId(id);
			addActionMessage("Added new ${objectVarName} with id: " + ${objectVarName}.getId());
			return Action.SUCCESS;
		} catch (Exception e) {
			return handleError("Can't add ${objectVarName}", e);
		}
	}

	public String update() throws Exception {
		try {
			logger.info("Updating ${objectVarName} with id: " + ${objectVarName}.getId());
			${objectVarName}Service.update(${objectVarName});
			addActionMessage("Updated ${objectVarName} with id: " + ${objectVarName}.getId());
			return Action.SUCCESS;
		} catch (Exception e) {
			return handleError("Can't save ${objectVarName}", e);
		}
	}

	public String edit() throws Exception {
		try {
			logger.info("Getting ${objectVarName} with id: " + ${objectVarName}.getId());
			${objectVarName} = ${objectVarName}Service.get(${objectVarName}.getId());
			return Action.SUCCESS;
		} catch (Exception e) {
			return handleError("Can't get ${objectVarName}", e);
		}
	}

	public String delete() throws Exception {
		try {
			logger.info("Deleting ${objectVarName} with id: " + ${objectVarName}.getId());
			${objectVarName}Service.deleteById(${objectVarName}.getId());
			addActionMessage("Deleted ${objectVarName} with id: " + ${objectVarName}.getId());
			return Action.SUCCESS;
		} catch (Exception e) {
			return handleError("Can't delete ${objectVarName}", e);
		}
	}
}
