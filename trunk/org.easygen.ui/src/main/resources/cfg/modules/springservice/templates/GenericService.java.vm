package ${project.serviceModuleConfig.packageName};

import java.io.Serializable;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityNotFoundException;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceException;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang.Validate;
import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Example.PropertySelector;
import org.hibernate.type.Type;

/**
 * Defines the generic method (save, update, delete, search, etc) for all kind of objets
 */
public abstract class GenericService<T> implements Service<T> {

	public static final int DEFAULT_MAX_RESULTS = 200;
	public static final PropertySelector NOT_NULL_OR_EMPTY = new NotNullOrEmptyPropertySelector();

	private static final class NotNullOrEmptyPropertySelector implements PropertySelector {

		private static final long serialVersionUID = 1L;

		public boolean include(Object object, String propertyName, Type type) {
			if (object == null) {
				return false;
			}
			try {
				Object property = PropertyUtils.getProperty(object, propertyName);
				Logger.getLogger(getClass()).debug(object);
				if (property == null) {
					return false;
				}
				if ((property instanceof String)
						&& ((String) property).trim().length() == 0) {
					return false;
				}
				if ((property instanceof Number)
						&& ((Number) property).longValue() == 0) {
					return false;
				}
				return true;
			} catch (Exception e) {
				return false;
			}
		}

		private Object readResolve() {
			return NOT_NULL_OR_EMPTY;
		}
	}

	private EntityManagerFactory entityManagerFactory;

	public void setEntityManagerFactory(EntityManagerFactory entityManagerFactory) {
		this.entityManagerFactory = entityManagerFactory;
	}

	private final ThreadLocal<EntityManager> entityManagerCache = new ThreadLocal<EntityManager>();

	protected EntityManager currentEntityManager() throws PersistenceException {
		EntityManager entityManager = (EntityManager) entityManagerCache.get();
		// Ouvre une nouvelle Session, si ce Thread n'en a aucune
		if (entityManager == null) {
			// Retrieve an application managed entity manager
			entityManager = entityManagerFactory.createEntityManager();
			entityManagerCache.set(entityManager);
		}
		return entityManager;
	}

	protected void closeEntityManager() throws PersistenceException {
		EntityManager entityManager = (EntityManager) entityManagerCache.get();
		entityManagerCache.set(null);
		if (entityManager != null)
			entityManager.close();
	}
	
	protected final Logger logger = Logger.getLogger(getClass());
	
	/**
	 * Renvoie true si les données de la requête peuvent être mises en cache
	 * 
	 * @return true/false
	 */
	protected boolean getCacheable() {
		return false;
	}

	/**
	 * Renvoie l'objet Class relatif à l'objet édité par ce service.
	 * 
	 * @return La classe de l'objet traitée par ce service
	 */
	protected abstract Class<T> getObjectClass();
	
	/**
	 * Return the object Primary Key
	 * @return
	 */
	protected abstract Serializable getObjectId(T object);

	/**
	 * Renvoi le nombre d'enregistrement maximum ramené par une recherche
	 * 
	 * @return
	 */
	public int getMaxResults() {
		return DEFAULT_MAX_RESULTS;
	}

	/**
	 * Enregistre en base la liste d'objets passés en paramètre.
	 * 
	 * @param listeObject la liste d'objets à enregistrer
	 * @throws ServiceException
	 * @return L'objet enregistré
	 */
	public void save(List<T> listeObject) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();

			for (int i = 0; i < listeObject.size(); i++) {
				T object = listeObject.get(i);
				entityManager.persist(object);
			}
			commitTransaction();
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Crée en base l'objet passé en paramètre
	 * 
	 * @param object L'objet à créer
	 * @return l'objet créé (avec son id)
	 * @throws ServiceException
	 */
	public void save(T object) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();

			entityManager.persist(object);

			commitTransaction();
//			return id;
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Met à jour en base l'objet passé en paramètre
	 * 
	 * @param object L'objet à mettre à jour
	 * @throws ServiceException
	 * @return l'objet mis à jour
	 */
	public void update(T object) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();
			//((Session)entityManager.getDelegate()).update(object);
			entityManager.merge(object);
			commitTransaction();
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Met à jour en base l'objet passé en paramètre
	 * 
	 * @param object L'objet à mettre à jour
	 * @throws ServiceException
	 * @return l'objet mis à jour
	 */
	public void update(List<T> objects) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();
			for (T object : objects) {
//				((Session)entityManager.getDelegate()).update(object);
				entityManager.merge(object);
			}
			commitTransaction();
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Supprime en base la liste d'objets passés en paramètre.
	 * 
	 * @param listeObject la liste d'objets à supprimer
	 * @throws ServiceException
	 */
	@SuppressWarnings("unchecked")
	public void deleteById(List<? extends Serializable> listeObject) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();

			for (Serializable serializable : listeObject) {
				Object object = entityManager.find(getObjectClass(), serializable);
				entityManager.remove(object);
			}

			commitTransaction();
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}

	}

	/**
	 * Supprime l'objet correspondant à l'id passé en paramètre
	 * 
	 * @param id L'id de l'objet à supprimer
	 * @throws ServiceException
	 */
	public void deleteById(Serializable id) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();
			Object object = entityManager.find(getObjectClass(), id);
			entityManager.remove(object);
			commitTransaction();
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Supprime en base la liste d'objet passée en paramètre. Si le paramètre
	 * session est null, alors crée la session et la transaction.
	 * 
	 * @param object les objets à supprimer
	 * @throws ServiceException
	 */
	public void delete(List<T> objects) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();

			for (T object : objects) {
				object = entityManager.find(getObjectClass(), getObjectId(object));
				entityManager.remove(object);
			}

			commitTransaction();
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Supprime en base l'objet passé en paramètre. Si le paramètre session est
	 * null, alors crée la session et la transaction.
	 * 
	 * @param object l'objet à supprimer
	 * @throws ServiceException
	 */
	public void delete(T object) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();

			object = entityManager.find(getObjectClass(), getObjectId(object));
			entityManager.remove(object);

			commitTransaction();
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			rollbackTransaction();
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Récupère l'objet correspondant à l'id passé en paramètre
	 * 
	 * @param id L'id de l'objet à récupérer
	 * @throws ServiceException
	 * @return L'objet récupéré
	 */
	public T get(Serializable id) throws ServiceException {
		return get(id, false);
	}

	/**
	 * Récupère l'objet correspondant à l'id passé en paramètre. Les descendants
	 * de l'objet sont initialisés si isChildrenInitialized vaut true.
	 * 
	 * @param id L'id de l'objet à récupérer
	 * @param initializeChildren indique si les descendants de l'objet doivent
	 *            être initialiser.
	 * @throws ServiceException
	 * @return L'objet récupéré
	 */
	@SuppressWarnings("unchecked")
	public T get(Serializable id, boolean initializeChildren) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();
			T object = (T) entityManager.find(getObjectClass(), id);
			if (object == null) {
				throw new ServiceException("Object Not Found (id=" + id + ')');
			}
			if (initializeChildren) {
				initializeChildren(object);
			}
			return object;
		} catch (EntityNotFoundException e) {
			logger.error(e.getCause(), e);
			throw new ServiceException("Object Not Found (id=" + id + ')', e);
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}

	}

	/**
	 * Récupère la liste complète des objets
	 * 
	 * @throws ServiceException
	 * @return la liste des objets
	 */
	@SuppressWarnings("unchecked")
	public List<T> list() throws ServiceException {
		return list(false);
	}

	/**
	 * Récupère la liste complète des objets
	 * 
	 * @param application_id l'id de l'application pour laquelle il faut
	 *            récupérer les objets
	 * @throws ServiceException
	 * @return la liste des objets
	 */
	@SuppressWarnings("unchecked")
	public List<T> list(boolean isChildrenInitialized) throws ServiceException {
		try {
			EntityManager entityManager = currentEntityManager();
			entityManager.getTransaction().begin();

			Criteria criteria = ((Session) entityManager.getDelegate()).createCriteria(getObjectClass());
			criteria.setMaxResults(getMaxResults());
			List<T> returnedList = (List<T>) criteria.setCacheable(getCacheable()).list();
			if (isChildrenInitialized) {
				for (T object : returnedList) {
					initializeChildren(object);
				}
			}
			return returnedList;
		} catch (PersistenceException e) {
			logger.error(e.getCause(), e);
			throw new DatabaseServiceException(e);
		} finally {
			closeEntityManager();
		}
	}

	/**
	 * Récupère la liste des objets correspondant aux critères de l'objet passé
	 * en paramètre
	 * 
	 * @param object L'objet contenant les critères
	 * @throws ServiceException
	 * @return la liste des objets trouvé
	 */
	public List<T> search(T object) throws ServiceException {
		return search(object, false);
	}

	/**
	 * Récupère la liste des objets correspondant aux critères de l'objet passé en paramètre
	 *
	 * @param object L'objet contenant les critères
	 * @param initializeSecondLevelObjects Force l'initialisation des objets liés en mode 'lazy' aux objets trouvés
	 * @throws ServiceException
	 * @return la liste des objets trouvé
	 */
	@SuppressWarnings("unchecked")
	public List<T> search(final T exampleEntity, final boolean initializeSecondLevelObjects) throws ServiceException {
        Validate.notNull(exampleEntity, "Example entity must not be null");
        logger.debug("Search: "+exampleEntity.toString());
        Session session = ((Session) currentEntityManager().getDelegate());
        Criteria criteria = session.createCriteria(exampleEntity.getClass());
		Example example = Example.create(exampleEntity);
		example.setPropertySelector(NOT_NULL_OR_EMPTY);
		example.ignoreCase();
		example.enableLike();
		logger.debug("Search example object: "+example.toString());
		criteria.add(example);
		addAssociationCriteria(criteria, exampleEntity);
		criteria.setMaxResults(getMaxResults());
		criteria.setCacheable(getCacheable());
        return (List<T>) criteria.list();
	}

	protected abstract void addAssociationCriteria(Criteria criteria, T object);

	/**
	 * Si l'objet a des relations cette méthode doit être implémenté
	 * 
	 * @param object
	 */
	protected void initializeChildren(T object) {

	}

	/**
	 * Effectue le commit de la transaction passé en paramètre.
	 * 
	 * @param tx La transaction à commité
	 */
	protected void commitTransaction() throws ServiceException {
		try {
			EntityTransaction transaction = currentEntityManager().getTransaction();
			if (transaction.isActive()) {
				transaction.commit();
			}
		} catch (Exception e) {
			rollbackTransaction();
			throw new DatabaseServiceException("Can't commit transaction", e);
		}
	}

	protected void rollbackTransaction() throws ServiceException {
		try {
			EntityTransaction transaction = currentEntityManager().getTransaction();
			if (transaction.isActive()) {
				transaction.rollback();
			}
		} catch (PersistenceException e) {
			throw new DatabaseServiceException("Can't rollback transaction", e);
		}
	}
}
