#macro( generateObjectImport $aObject )
	#foreach ($aField in $aObject.fields)
		#if ($aField.foreignKey == true && $aField.foreignList == false && $aField.nullable == false)
			import ${project.dataModuleConfig.packageName}.${aField.propertyType};
			#generateObjectImport( $aField.foreignObject )
		#end
	#end
#end

#macro( generateObjectCreate $aObject )
	#set ($objectVarName = "${aObject.className.toLowerCase().charAt(0)}${aObject.className.substring(1)}" )
	${aObject.className} ${objectVarName} = new ${aObject.className}();
	#foreach ($aField in $aObject.fields)
		#if ($aField.foreignKey == true && $aField.foreignList == false && $aField.nullable == false)
			$stack.push($objectVarName)
			$stack.push($aField.propertyName)
			Service<${aField.foreignObject.className}> ${aField.propertyName}Service = serviceLocator.get${aField.foreignObject.className}Service();
			#generateObjectCreate( $aField.foreignObject )
			${objectVarName}Service.save(${objectVarName});
			#set ($savePropertyName = $stack.pop())
			#set ($objectVarName = $stack.pop())
			#set ($capitalizedPropertyName = $stringutils.capitalizeFirstLetter($savePropertyName) )
			${objectVarName}.set${capitalizedPropertyName}(${savePropertyName});
		#elseif ($aField.foreignKey == false && $aField.primaryKey == false)
			#generateSimpleProperty( $objectVarName $aField )
		#end
	#end
#end

#macro( generateSimpleProperty $varName $aField )
	#set ( $capitalizedPropertyName = $stringutils.capitalizeFirstLetter($aField.propertyName) )
	#if ($aField.propertyShortType == "String")
		${varName}.set${capitalizedPropertyName}(String.valueOf(randomizer.nextInt(${aField.precision})));
	#elseif ($aField.propertyShortType == "Date")
		${varName}.set${capitalizedPropertyName}(new Date());
	#elseif ($aField.propertyShortType == "Long" || $aField.propertyShortType == "Integer")
		${varName}.set${capitalizedPropertyName}(randomizer.next${aField.propertyShortType}());
	#else
		//${varName}.set${capitalizedPropertyName}($aField.propertyShortType);
	#end
#end

#macro( generateDestroyCode $aObject )
	#foreach ($aField in $aObject.fields)
		#if ($aField.foreignKey == true && $aField.foreignList == false && $aField.nullable == false)
		#set ( $objectClassName = $stringutils.capitalizeFirstLetter($aField.propertyName) )
			Service<${objectClassName}> ${aField.propertyName}Service = serviceLocator.get${objectClassName}Service();
			List<${objectClassName}> ${aField.propertyName}s = ${aField.propertyName}Service.list();
			${aField.propertyName}Service.delete(${aField.propertyName}s);
			#generateDestroyCode( $aField.foreignObject )
		#end
	#end
#end

package ${project.serviceModuleConfig.packageName};

import java.io.Serializable;
import java.util.*;

#generateObjectImport( $object )
import ${project.dataModuleConfig.packageName}.${object.className};

/**
 *
 */
public class ${object.className}ServiceTest extends AbstractServiceTest<${object.className}> {

	@Override
	protected void init() throws Exception {
		super.init();
	}

	@Override
	protected void destroy() throws Exception {
#foreach ($field in $object.fields)
#if ($field.foreignKey == true && $field.foreignList == false && $field.nullable == false)
#set ( $objectClassName = $stringutils.capitalizeFirstLetter($field.propertyName) )
		Service<${objectClassName}> ${field.propertyName}Service = serviceLocator.get${objectClassName}Service();
		List<${objectClassName}> ${field.propertyName}s = ${field.propertyName}Service.list();
		${field.propertyName}Service.delete(${field.propertyName}s);
		#generateDestroyCode( $field.foreignObject )
#end
#end
		super.destroy();
	}

	/**
	 * @see org.xebia.service.ServiceTestCase#createOneObject()
	 */
	@Override
	protected ${object.className} createObject() throws ServiceException {
		#generateObjectCreate( $object )
		return ${objectVarName};
	}
	
	/**
	 * @see org.xebia.service.ServiceTestCase#updateObject()
	 */
	@Override
	protected void updateObject(${object.className} object) {
#foreach ($field in $object.fields)
#if ($field.foreignKey == false && $field.primaryKey == false)
	#generateSimpleProperty( "object" $field )
#end
#end
	}

	@Override
	protected ${object.className} createSearchObject(${object.className} fromObject) {
		${object.className} object = new ${object.className}();
#foreach ($field in $object.fields)
#if ($field.foreignKey == false && $field.primaryKey == false)
#set ( $methodName = $stringutils.capitalizeFirstLetter($field.propertyName) )
		object.set${methodName}(fromObject.get${methodName}());
#end
#end
		return object;
	}

	/**
	 * @see org.xebia.service.ServiceTestCase#extractId(java.lang.Object)
	 */
	@Override
	protected Serializable extractId(${object.className} object) {
#foreach ($field in $object.fields)
#if ($field.primaryKey == true)
#set ( $methodName = $stringutils.capitalizeFirstLetter($field.propertyName) )
		return object.get${methodName}();
#end
#end
	}

	/**
	 * @throws ServiceException 
	 * @see org.xebia.service.ServiceTestCase#getService(ServiceLocator)
	 */
	@Override
	protected Service<${object.className}> getService() throws ServiceException {
		return serviceLocator.get${object.className}Service();
	}

}
