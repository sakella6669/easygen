package ${project.viewModuleConfig.packageName};

import org.apache.wicket.Request;
import org.apache.wicket.Response;
import org.apache.wicket.Session;
import org.apache.wicket.resource.loader.ClassStringResourceLoader;
import org.apache.wicket.spring.SpringWebApplication;
import org.apache.wicket.spring.injection.annot.SpringComponentInjector;

#foreach ($className in $classList)
#set ($objectPackageName = "${className.toLowerCase().charAt(0)}${className.substring(1)}" )
import ${project.viewModuleConfig.packageName}.${objectPackageName}.${className}ListPage;
#end

#set ($appName = $stringutils.capitalizeFirstLetter(${project.name}) )

public class ${appName}Application extends SpringWebApplication {

	public ${appName}Application() {
		super();
	}

	@Override
	protected void init() {
		super.init();
#foreach ($className in $classList)
		getResourceSettings().addStringResourceLoader(new ClassStringResourceLoader(${className}ListPage.class));
#end
		// For production and W3C HTML compliance you can switch this option to true 
		getMarkupSettings().setStripWicketTags(false);
		// Remove (or not) the wicket xml namespace declaration
		getMarkupSettings().setStripXmlDeclarationFromOutput(false);
		// Enable Spring injection on page
		addComponentInstantiationListener(new SpringComponentInjector(this));
	}

	@Override
	public Session newSession(Request request, Response response) {
		return new ${appName}WebSession(request);
	}

	/**
	 * @see wicket.Application#getHomePage()
	 */
	@Override
	@SuppressWarnings("unchecked")
	public Class getHomePage() {
		return IndexPage.class;
	}

}
